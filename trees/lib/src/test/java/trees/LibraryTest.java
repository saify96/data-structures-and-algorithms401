/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package trees;

import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Assertions.assertEquals;

class LibraryTest {
    //implementation tests
    @Test
    void instantiateEmptyTree() {
        Tree tree = new Tree();
        assertNull(tree.root);
    }

    @Test
    void singleRootTree() {
        Tree tree = new Tree();
        tree.root = new Node("A");
        assertNotNull(tree.root);
    }

    @Test
    void smallTree() {
        Tree tree = new Tree();
        tree.root = new Node("A");
        tree.root.right = new Node("B");
        tree.root.left = new Node("C");
        assertEquals("A", tree.root.value);
        assertEquals("B", tree.root.right.value);
        assertEquals("C", tree.root.left.value);
    }

    @Test
    void treeMethodsTests() {
        Tree tree = new Tree();
        tree.root = new Node("A");
        tree.root.right = new Node("C");
        tree.root.left = new Node("B");
        tree.root.right.left = new Node("F");
        tree.root.left.right = new Node("E");
        tree.root.left.left = new Node("D");
        assertEquals("A -> B -> D -> E -> C -> F -> ", tree.preOrder(tree.root));
        assertEquals("D -> B -> E -> A -> F -> C -> ", tree.inOrder(tree.root));
        assertEquals("D -> E -> B -> F -> C -> A -> ", tree.postOrder(tree.root));
    }

    //maximum test
    @Test
    void findMaxMethodTests() {
        Tree tree = new Tree();
        tree.root = new Node(1);
        tree.root.right = new Node(23);
        tree.root.left = new Node(66);
        tree.root.right.left = new Node(54);
        tree.root.left.right = new Node(20);
        tree.root.left.left = new Node(16);
        assertEquals(66, tree.findMax());
    }

    @Test
    void findMaxMethodTests2() {
        Tree tree2 = new Tree();
        tree2.root = new Node(-5);
        tree2.root.right = new Node(-88);
        tree2.root.left = new Node(0);
        tree2.root.right.left = new Node(20);
        tree2.root.left.right = new Node(-62);
        tree2.root.left.left = new Node(16);
        assertEquals(20, tree2.findMax());
    }

    //Breadth First tests
    @Test
    void BreadthTests() {
        Tree tree = new Tree();
        tree.root = new Node("A");
        tree.root.right = new Node("C");
        tree.root.left = new Node("B");
        tree.root.right.left = new Node("F");
        tree.root.left.right = new Node("E");
        tree.root.left.left = new Node("D");
        assertEquals("[A, B, C, D, E, F]", tree.breadthFirst(tree).toString());
    }
    @Test
    void BreadthNumTests() {
        Tree tree = new Tree();
        tree.root = new Node(1);
        tree.root.right = new Node(3);
        tree.root.left = new Node(2);
        tree.root.right.left = new Node(6);
        tree.root.left.right = new Node(5);
        tree.root.left.left = new Node(4);
        assertEquals("[1, 2, 3, 4, 5, 6]", tree.breadthFirst(tree).toString());
    }

    //fizzbuzz tests
    @Test
    void fizzBuzzTests() {
        kTree ktree = new kTree();
        NodeK root = new NodeK("22");
        NodeK node1 = new NodeK("15");
        NodeK node2 = new NodeK("20");
        NodeK node3 = new NodeK("65");
        NodeK node4 = new NodeK("30");
        NodeK node5 = new NodeK("555");
        NodeK node6 = new NodeK("18");

        ktree.root = root;
        root.children.add(node1);
        root.children.add(node2);
        node1.children.add(node3);
        node2.children.add(node4);
        node2.children.add(node5);
        node2.children.add(node6);
        assertEquals("22 FizzBuzz Buzz Buzz FizzBuzz FizzBuzz Fizz ",ktree.fizzBuzz(root));

    }
}
