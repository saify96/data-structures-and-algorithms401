/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package graph;

import org.junit.jupiter.api.Test;

import java.util.Arrays;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

class AppTest {
    // Implementation tests
    @Test
    void graphTests1() {
        Graph<String> classUnderTest = new Graph();
        Node<String> node1 = classUnderTest.addNode("A");
        assertEquals("[{A}]", classUnderTest.getNodes().toString());
        assertEquals("{A}", classUnderTest.addNode("A").toString());
    }

    @Test
    void graphTests2() {
        Graph<String> classUnderTest = new Graph();
        Node<String> node1 = classUnderTest.addNode("A");
        Node<String> node2 = classUnderTest.addNode("B");
        classUnderTest.addEdge(node1, node2);
        assertEquals("[{B}]", classUnderTest.getNeighbors(node1).toString());
    }

    @Test
    void graphTests3() {
        Graph<String> classUnderTest = new Graph();
        Node<String> node1 = classUnderTest.addNode("A");
        Node<String> node2 = classUnderTest.addNode("B");
        classUnderTest.addEdge(node1, node2);

        assertEquals("[{B}, {A}]", classUnderTest.getNodes().toString());
        assertEquals(2, classUnderTest.getSize());
    }

    @Test
    void graphTests4() {
        Graph<String> classUnderTest = new Graph();
        Node<String> node1 = classUnderTest.addNode("A");
        Node<String> node2 = classUnderTest.addNode("B");
        classUnderTest.addEdge(node1, node2, 100.0);

        assertEquals(100.0, classUnderTest.graphElemnts1.get(node1).get(node2));
    }

    // BreadthFirst tests
    @Test
    void breadthFirst() {
        Graph<String> graphTest = new Graph<>();
        Node<String> node1 = graphTest.addNode("A");
        Node<String> node2 = graphTest.addNode("B");
        Node<String> node3 = graphTest.addNode("C");
        Node<String> node4 = graphTest.addNode("D");
        Node<String> node5 = graphTest.addNode("E");
        Node<String> node6 = graphTest.addNode("F");

        graphTest.addEdge(node1, node2);
        graphTest.addEdge(node2, node3);
        graphTest.addEdge(node3, node4);
        graphTest.addEdge(node4, node5);
        graphTest.addEdge(node5, node6);
        graphTest.addEdge(node6, node5);

        assertEquals("[{A}, {B}, {C}, {D}, {E}, {F}]", graphTest.breadthFirst(node1).toString());
        assertEquals("[{B}, {C}, {D}, {E}, {F}]", graphTest.breadthFirst(node2).toString());
        assertEquals("[{F}, {E}]", graphTest.breadthFirst(node6).toString());
    }

    // Code challenge 37
    @Test
    public void testBusinessTrip() {
        Graph<String> graphTest = new Graph<>();
        Node<String> Pandora = graphTest.addNode("Pandora");
        Node<String> Arendelle = graphTest.addNode("Arendelle");
        Node<String> Metroville = graphTest.addNode("Metroville");
        Node<String> Monstroplolis = graphTest.addNode("Monstroplolis");
        Node<String> Narnia = graphTest.addNode("Narnia");
        Node<String> Naboo = graphTest.addNode("Naboo");

        graphTest.addEdge(Pandora, Arendelle, 150.0);
        graphTest.addEdge(Arendelle, Metroville, 99.0);
        graphTest.addEdge(Arendelle, Monstroplolis, 42.0);
        graphTest.addEdge(Metroville, Narnia, 37.0);
        graphTest.addEdge(Metroville, Pandora, 82.0);
        graphTest.addEdge(Metroville, Naboo, 26.0);
        graphTest.addEdge(Monstroplolis, Metroville, 105.0);
        graphTest.addEdge(Monstroplolis, Naboo, 73.0);
        graphTest.addEdge(Naboo, Narnia, 250.0);

        List<Node<String>> cities1 = Arrays.asList(Metroville, Pandora);
        List<Node<String>> cities2 = Arrays.asList(Arendelle, Monstroplolis, Naboo);
        List<Node<String>> cities3 = Arrays.asList(Naboo, Pandora);
        List<Node<String>> cities4 = Arrays.asList(Narnia, Arendelle, Naboo);

        assertEquals("true, $82.0", graphTest.businessTrip(graphTest, cities1));
        assertEquals("true, $115.0", graphTest.businessTrip(graphTest, cities2));
        assertEquals("false, $0.0", graphTest.businessTrip(graphTest, cities3));
        assertEquals("false, $0.0", graphTest.businessTrip(graphTest, cities4));
    }
}

